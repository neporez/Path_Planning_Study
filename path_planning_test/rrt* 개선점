기존에 rrt*를 적용하기전에는 중앙선의 폭을 5m 간격, 장애물 사이를 지나갈 수 있는 여유 폭을 2m로 설정했으나
실전에서 테스트 해봤을 때는 중앙선의 폭이 3m, 장애물 사이의 여유 폭은 1m에 가까워서 중앙선을 장애물로 인식하던 상황에서는 rrt*가 제대로 작동하지 않았다.

그래서 지난 테스트 때는 중앙선 없이 rrt*를 테스트하였고 이를 계기로 중앙선에 대한 처리를 따로 해야겠다고 생각했다.

#######################################################################################################

그래서 중앙선에 대한 처리 방식을 바꿨다.

중앙선은 global path와 마찬가지로 0.5m의 간격을 가진 waypoint의 집합으로 보고 각 waypoint를 직선으로 이어주었다.
그러면 waypoint의 갯수보다 1개 적은 직선의 리스트가 나오게 된다.

그 후 rrt*의 샘플링을 통해 생기는 직선과 중앙선의 waypoint를 이어준 직선과 교차하는지 판별한다.

판별 방법은 CCW(Counter Clockwise)의 방식을 사용해서 두 직선의 교차를 판별하였다.

###################################################################################################

또한 기존의 rrt*는 인접한 노드를 찾는 기준인 radius값이 장애물의 radius보다 2배정도 크게 되면 장애물을 통과하여 경로를 생성하는 문제가 있었다.

이 또한 점과 직선과의 거리 공식을 통해서 직선과 점 사이의 길이가 장애물의 radius보다 작으면 충돌하는 방식으로 바꿨다.

그 이후로는 장애물을 통과하여 경로를 생성하는 문제는 고쳐졌다.

######################################################################################################

rrt*의 인접한 노드를 찾는 기준을 고정된 radius에서 노드의 갯수가 많아질 수록 인접한 노드를 찾는 기준인 radius의 크기가 작아지도록 수정하였다.
기존의 고정된 radius로 rrt*를 진행하면 샘플링 횟수가 많을수록 연산량이 많아질 확률이 높아져서 제때 경로를 생성하지 못할 수 있었다.
그러나 수정된 방식이라면 샘플링을 진행할수록 인접한 노드를 찾는 범위가 작아져서 연산량을 줄이는 데에 도움이 된다.

샘플링 범위 또한 120도에서 90도로 수정하였다.

###########################################################################################################

